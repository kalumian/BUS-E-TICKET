// <auto-generated />
using System;
using Data_Access_Layer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data_Access_Layer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250219132704_Change ContactEntity into Person Table")]
    partial class ChangeContactEntityintoPersonTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core_Layer.Entities.Actors.AuthoUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<int>("AccountStatus")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<int>("Permission")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("RegisterationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.CustomerEntity", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("AddressID")
                        .HasColumnType("integer");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.HasKey("CustomerID");

                    b.HasIndex("AccountID");

                    b.HasIndex("AddressID");

                    b.HasIndex("PersonID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.ManagerEntity", b =>
                {
                    b.Property<int>("ManagerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ManagerID"));

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("integer");

                    b.HasKey("ManagerID");

                    b.HasIndex("AccountID");

                    b.HasIndex("CreatedByID");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.PassengerEntity", b =>
                {
                    b.Property<int>("PassengerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PassengerID"));

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.HasKey("PassengerID");

                    b.HasIndex("PersonID");

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.PersonEntity", b =>
                {
                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PersonID"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ContactInformationID")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NationalID")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("PersonID");

                    b.HasIndex("ContactInformationID");

                    b.HasIndex("NationalID")
                        .IsUnique()
                        .HasDatabaseName("IX_Person_NationalID");

                    b.ToTable("People");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.ServiceProvider.BusinessEntity", b =>
                {
                    b.Property<int>("BusinessID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BusinessID"));

                    b.Property<int>("AddressID")
                        .HasColumnType("integer");

                    b.Property<string>("BusinessLicenseNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ContactInformationID")
                        .HasColumnType("integer");

                    b.Property<string>("LogoURL")
                        .HasColumnType("text");

                    b.Property<string>("WebSiteLink")
                        .HasColumnType("text");

                    b.HasKey("BusinessID");

                    b.HasIndex("AddressID")
                        .IsUnique();

                    b.HasIndex("ContactInformationID");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.ServiceProvider.Registeration_Request.SPRegRequestEntity", b =>
                {
                    b.Property<int>("SPRegRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SPRegRequestID"));

                    b.Property<int>("BusinessID")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("SPRegRequestID");

                    b.HasIndex("BusinessID");

                    b.ToTable("SPRegRequests");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.ServiceProvider.Registeration_Request.SPRegResponseEntity", b =>
                {
                    b.Property<int>("ResponseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ResponseID"));

                    b.Property<int>("RequestID")
                        .HasColumnType("integer");

                    b.Property<int?>("RespondedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ResponseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ResponseText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("Result")
                        .HasColumnType("boolean");

                    b.HasKey("ResponseID");

                    b.HasIndex("RequestID")
                        .IsUnique();

                    b.HasIndex("RespondedByID");

                    b.ToTable("SPRegResponses");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.ServiceProvider.ServiceProviderEntity", b =>
                {
                    b.Property<int>("ServiceProviderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ServiceProviderID"));

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("BusinessID")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.HasKey("ServiceProviderID");

                    b.HasIndex("AccountID");

                    b.HasIndex("BusinessID")
                        .IsUnique();

                    b.ToTable("ServiceProviders");
                });

            modelBuilder.Entity("Core_Layer.Entities.ContactInformationEntity", b =>
                {
                    b.Property<int?>("ContactInformationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("ContactInformationID"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Facebook")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Instagram")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LandLineNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("LinkedIn")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Twitter")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ContactInformationID");

                    b.ToTable("ContactInformations");
                });

            modelBuilder.Entity("Core_Layer.Entities.CurrencyEntity", b =>
                {
                    b.Property<int>("CurrencyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CurrencyID"));

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.HasKey("CurrencyID");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Core_Layer.Entities.Locations.AddressEntity", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AddressID"));

                    b.Property<string>("AdditionalDetails")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("CityID")
                        .HasColumnType("integer");

                    b.Property<int?>("StreetID")
                        .HasColumnType("integer");

                    b.HasKey("AddressID");

                    b.HasIndex("CityID");

                    b.HasIndex("StreetID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Core_Layer.Entities.Locations.CityEntity", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CityID"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("RegionID")
                        .HasColumnType("integer");

                    b.HasKey("CityID");

                    b.HasIndex("RegionID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Core_Layer.Entities.Locations.CountryEntity", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CountryID"));

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("CountryID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Core_Layer.Entities.Locations.LocationEntity", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LocationID"));

                    b.Property<int>("AddressID")
                        .HasColumnType("integer");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LocationURL")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("LocationID");

                    b.HasIndex("AddressID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Core_Layer.Entities.Locations.RegionEntity", b =>
                {
                    b.Property<int>("RegionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RegionID"));

                    b.Property<int>("CountryID")
                        .HasColumnType("integer");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("RegionID");

                    b.HasIndex("CountryID");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Core_Layer.Entities.Locations.StreetEntity", b =>
                {
                    b.Property<int>("StreetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StreetID"));

                    b.Property<int>("CityID")
                        .HasColumnType("integer");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("StreetID");

                    b.HasIndex("CityID");

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("Core_Layer.Entities.Payment.PaymentEntity", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PaymentID"));

                    b.Property<int?>("CurrencyID")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsRefundable")
                        .HasColumnType("boolean");

                    b.Property<string>("OrderID")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("ReservationID")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TripAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("VAT")
                        .HasColumnType("numeric");

                    b.HasKey("PaymentID");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("ReservationID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Core_Layer.Entities.Trip.Reservation.InvoiceEntity", b =>
                {
                    b.Property<int>("InvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InvoiceID"));

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PaymentID")
                        .HasColumnType("integer");

                    b.HasKey("InvoiceID");

                    b.HasIndex("PaymentID")
                        .IsUnique();

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Core_Layer.Entities.Trip.Reservation.ReservationEntity", b =>
                {
                    b.Property<int?>("ReservationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("ReservationID"));

                    b.Property<int?>("CustomerID")
                        .HasColumnType("integer");

                    b.Property<int>("PassengerID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ReservationStatus")
                        .HasColumnType("integer");

                    b.Property<int>("TripID")
                        .HasColumnType("integer");

                    b.HasKey("ReservationID");

                    b.HasIndex("CustomerID")
                        .IsUnique();

                    b.HasIndex("PassengerID");

                    b.HasIndex("TripID");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Core_Layer.Entities.Trip.Reservation.TicketEntity", b =>
                {
                    b.Property<int>("TicketID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TicketID"));

                    b.Property<int>("InvoiceID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PNR")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("TicketID");

                    b.HasIndex("InvoiceID")
                        .IsUnique();

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Core_Layer.Entities.Trip.TripEntity", b =>
                {
                    b.Property<int>("TripID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TripID"));

                    b.Property<int>("CurrencyID")
                        .HasColumnType("integer");

                    b.Property<string>("DriverInfo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("EndLocationID")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("ServiceProviderID")
                        .HasColumnType("integer");

                    b.Property<int>("StartLocationID")
                        .HasColumnType("integer");

                    b.Property<short>("TotalSeats")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("TripDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("TripDuration")
                        .HasColumnType("interval");

                    b.Property<int>("TripStatus")
                        .HasColumnType("integer");

                    b.Property<short>("VehicleCapacity")
                        .HasColumnType("smallint");

                    b.Property<string>("VehicleInfo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("TripID");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("EndLocationID");

                    b.HasIndex("ServiceProviderID");

                    b.HasIndex("StartLocationID");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.CustomerEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.Actors.AuthoUser", "Account")
                        .WithMany("Customers")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core_Layer.Entities.Locations.AddressEntity", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core_Layer.Entities.Actors.PersonEntity", "Person")
                        .WithMany("Customers")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Address");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.ManagerEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.Actors.AuthoUser", "Account")
                        .WithMany("Managers")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core_Layer.Entities.Actors.ManagerEntity", "CreatedBy")
                        .WithMany("Managers")
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.PassengerEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.Actors.PersonEntity", "Person")
                        .WithMany("Passengers")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.PersonEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.ContactInformationEntity", "ContactInformation")
                        .WithMany()
                        .HasForeignKey("ContactInformationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ContactInformation");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.ServiceProvider.BusinessEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.Locations.AddressEntity", "Address")
                        .WithOne("Business")
                        .HasForeignKey("Core_Layer.Entities.Actors.ServiceProvider.BusinessEntity", "AddressID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core_Layer.Entities.ContactInformationEntity", "ContactInformation")
                        .WithMany()
                        .HasForeignKey("ContactInformationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("ContactInformation");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.ServiceProvider.Registeration_Request.SPRegRequestEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.Actors.ServiceProvider.BusinessEntity", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.ServiceProvider.Registeration_Request.SPRegResponseEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.Actors.ServiceProvider.Registeration_Request.SPRegRequestEntity", "Request")
                        .WithOne("Response")
                        .HasForeignKey("Core_Layer.Entities.Actors.ServiceProvider.Registeration_Request.SPRegResponseEntity", "RequestID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core_Layer.Entities.Actors.ManagerEntity", "RespondedBy")
                        .WithMany()
                        .HasForeignKey("RespondedByID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Request");

                    b.Navigation("RespondedBy");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.ServiceProvider.ServiceProviderEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.Actors.AuthoUser", "Account")
                        .WithMany("ServiceProviders")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core_Layer.Entities.Actors.ServiceProvider.BusinessEntity", "Business")
                        .WithOne("ServiceProvider")
                        .HasForeignKey("Core_Layer.Entities.Actors.ServiceProvider.ServiceProviderEntity", "BusinessID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Core_Layer.Entities.Locations.AddressEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.Locations.CityEntity", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core_Layer.Entities.Locations.StreetEntity", "Street")
                        .WithMany("Address")
                        .HasForeignKey("StreetID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Street");
                });

            modelBuilder.Entity("Core_Layer.Entities.Locations.CityEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.Locations.RegionEntity", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Core_Layer.Entities.Locations.LocationEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.Locations.AddressEntity", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Core_Layer.Entities.Locations.RegionEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.Locations.CountryEntity", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Core_Layer.Entities.Locations.StreetEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.Locations.CityEntity", "City")
                        .WithMany("Streets")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Core_Layer.Entities.Payment.PaymentEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.CurrencyEntity", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core_Layer.Entities.Trip.Reservation.ReservationEntity", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("Core_Layer.Entities.Trip.Reservation.InvoiceEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.Payment.PaymentEntity", "Payment")
                        .WithOne("Invoice")
                        .HasForeignKey("Core_Layer.Entities.Trip.Reservation.InvoiceEntity", "PaymentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Core_Layer.Entities.Trip.Reservation.ReservationEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.Actors.CustomerEntity", "Customer")
                        .WithOne("Reservations")
                        .HasForeignKey("Core_Layer.Entities.Trip.Reservation.ReservationEntity", "CustomerID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core_Layer.Entities.Actors.PassengerEntity", "Passenger")
                        .WithMany()
                        .HasForeignKey("PassengerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core_Layer.Entities.Trip.TripEntity", "Trip")
                        .WithMany()
                        .HasForeignKey("TripID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Passenger");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Core_Layer.Entities.Trip.Reservation.TicketEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.Trip.Reservation.InvoiceEntity", "Invoice")
                        .WithOne("Tickets")
                        .HasForeignKey("Core_Layer.Entities.Trip.Reservation.TicketEntity", "InvoiceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Core_Layer.Entities.Trip.TripEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.CurrencyEntity", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core_Layer.Entities.Locations.LocationEntity", "EndLocation")
                        .WithMany()
                        .HasForeignKey("EndLocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core_Layer.Entities.Actors.ServiceProvider.ServiceProviderEntity", "ServiceProvider")
                        .WithMany()
                        .HasForeignKey("ServiceProviderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core_Layer.Entities.Locations.LocationEntity", "StartLocation")
                        .WithMany()
                        .HasForeignKey("StartLocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("EndLocation");

                    b.Navigation("ServiceProvider");

                    b.Navigation("StartLocation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Core_Layer.Entities.Actors.AuthoUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Core_Layer.Entities.Actors.AuthoUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core_Layer.Entities.Actors.AuthoUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Core_Layer.Entities.Actors.AuthoUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.AuthoUser", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Managers");

                    b.Navigation("ServiceProviders");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.CustomerEntity", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.ManagerEntity", b =>
                {
                    b.Navigation("Managers");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.PersonEntity", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Passengers");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.ServiceProvider.BusinessEntity", b =>
                {
                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.ServiceProvider.Registeration_Request.SPRegRequestEntity", b =>
                {
                    b.Navigation("Response")
                        .IsRequired();
                });

            modelBuilder.Entity("Core_Layer.Entities.Locations.AddressEntity", b =>
                {
                    b.Navigation("Business");
                });

            modelBuilder.Entity("Core_Layer.Entities.Locations.CityEntity", b =>
                {
                    b.Navigation("Streets");
                });

            modelBuilder.Entity("Core_Layer.Entities.Locations.CountryEntity", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("Core_Layer.Entities.Locations.RegionEntity", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Core_Layer.Entities.Locations.StreetEntity", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("Core_Layer.Entities.Payment.PaymentEntity", b =>
                {
                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Core_Layer.Entities.Trip.Reservation.InvoiceEntity", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
