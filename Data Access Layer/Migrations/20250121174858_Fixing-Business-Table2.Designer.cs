// <auto-generated />
using System;
using Data_Access_Layer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data_Access_Layer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250121174858_Fixing-Business-Table2")]
    partial class FixingBusinessTable2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core_Layer.Entities.Actors.AuthoUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AccountStatus")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Permission")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisterationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.CustomerEntity", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AddressID")
                        .HasColumnType("int");

                    b.Property<int>("ContactInformationID")
                        .HasColumnType("int");

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.HasKey("CustomerID");

                    b.HasIndex("AccountID");

                    b.HasIndex("AddressID");

                    b.HasIndex("ContactInformationID");

                    b.HasIndex("PersonID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.ManagerEntity", b =>
                {
                    b.Property<int>("ManagerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagerID"));

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CreatedByID")
                        .HasColumnType("int");

                    b.HasKey("ManagerID");

                    b.HasIndex("AccountID");

                    b.HasIndex("CreatedByID");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.PassengerEntity", b =>
                {
                    b.Property<int>("PassengerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PassengerID"));

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.HasKey("PassengerID");

                    b.HasIndex("PersonID");

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.PersonEntity", b =>
                {
                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonID"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NationalID")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("PersonID");

                    b.ToTable("People");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.ServiceProvider.BusinessEntity", b =>
                {
                    b.Property<int>("BusinessID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusinessID"));

                    b.Property<int>("AddressID")
                        .HasColumnType("int");

                    b.Property<string>("BusinessLicenseNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ContactInformationID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("WebSiteLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BusinessID");

                    b.HasIndex("AddressID")
                        .IsUnique();

                    b.HasIndex("ContactInformationID");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.ServiceProvider.Registeration_Request.SPRegRequestEntity", b =>
                {
                    b.Property<int>("SPRegRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SPRegRequestID"));

                    b.Property<int>("BusinessID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("SPRegRequestID");

                    b.HasIndex("BusinessID");

                    b.ToTable("SPRegRequests");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.ServiceProvider.Registeration_Request.SPRegResponseEntity", b =>
                {
                    b.Property<int>("ResponseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResponseID"));

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.Property<int?>("RespondedByID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResponseText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Result")
                        .HasColumnType("bit");

                    b.HasKey("ResponseID");

                    b.HasIndex("RequestID");

                    b.HasIndex("RespondedByID");

                    b.ToTable("SPRegResponses");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.ServiceProvider.ServiceProviderEntity", b =>
                {
                    b.Property<int>("ServiceProviderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceProviderID"));

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BusinessID")
                        .HasColumnType("int");

                    b.HasKey("ServiceProviderID");

                    b.HasIndex("AccountID");

                    b.HasIndex("BusinessID");

                    b.ToTable("ServiceProviders");
                });

            modelBuilder.Entity("Core_Layer.Entities.ContactInformationEntity", b =>
                {
                    b.Property<int>("ContactInformationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactInformationID"));

                    b.Property<string>("Facebook")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Instagram")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LandLineNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("LinkedIn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MobileNumber2")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Twitter")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ContactInformationID");

                    b.ToTable("ContactInformationEntity");
                });

            modelBuilder.Entity("Core_Layer.Entities.Locations.AddressEntity", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressID"));

                    b.Property<string>("AdditionalDetails")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("LocationURL")
                        .HasMaxLength(700)
                        .HasColumnType("nvarchar(700)");

                    b.Property<int?>("StreetID")
                        .HasColumnType("int");

                    b.HasKey("AddressID");

                    b.HasIndex("CityID");

                    b.HasIndex("StreetID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Core_Layer.Entities.Locations.CityEntity", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityID"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RegionID")
                        .HasColumnType("int");

                    b.HasKey("CityID");

                    b.HasIndex("RegionID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Core_Layer.Entities.Locations.CountryEntity", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryID"));

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CountryID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Core_Layer.Entities.Locations.LocationEntity", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationID"));

                    b.Property<int>("AddressID")
                        .HasColumnType("int");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MapLocation")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("LocationID");

                    b.HasIndex("AddressID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Core_Layer.Entities.Locations.RegionEntity", b =>
                {
                    b.Property<int>("RegionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegionID"));

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RegionID");

                    b.HasIndex("CountryID");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Core_Layer.Entities.Locations.StreetEntity", b =>
                {
                    b.Property<int>("StreetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StreetID"));

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("StreetID");

                    b.HasIndex("CityID");

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("Core_Layer.Entities.Payment.PaymentEntity", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"));

                    b.Property<bool>("IsRefundable")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentInfoID")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<int>("ReservationID")
                        .HasColumnType("int");

                    b.HasKey("PaymentID");

                    b.HasIndex("PaymentInfoID");

                    b.HasIndex("ReservationID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Core_Layer.Entities.Payment.PaymentInfoEntity", b =>
                {
                    b.Property<int>("PaymentInfoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentInfoID"));

                    b.Property<decimal?>("AdditionalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TripAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VAT")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PaymentInfoID");

                    b.ToTable("PaymentInfos");
                });

            modelBuilder.Entity("Core_Layer.Entities.PaymentAccount.CurrencyEntity", b =>
                {
                    b.Property<int>("CurrencyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CurrencyID"));

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CurrencyID");

                    b.ToTable("Currencys");
                });

            modelBuilder.Entity("Core_Layer.Entities.PaymentAccount.PayPalAccountEntity", b =>
                {
                    b.Property<int>("PayPalAccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PayPalAccountID"));

                    b.Property<string>("AccountEmail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<int>("PaymentAccountID")
                        .HasColumnType("int");

                    b.HasKey("PayPalAccountID");

                    b.HasIndex("CountryID");

                    b.HasIndex("PaymentAccountID");

                    b.ToTable("PayPalAccounts");
                });

            modelBuilder.Entity("Core_Layer.Entities.PaymentAccount.PaymentAccountEntity", b =>
                {
                    b.Property<int>("PaymentAccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentAccountID"));

                    b.Property<string>("AccountOwnerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrencyID")
                        .HasColumnType("int");

                    b.Property<int>("PaymentAccountType_ID")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<int>("ServiceProviderID")
                        .HasColumnType("int");

                    b.HasKey("PaymentAccountID");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("ServiceProviderID");

                    b.ToTable("PaymentAccounts");
                });

            modelBuilder.Entity("Core_Layer.Entities.Reservation.InvoiceEntity", b =>
                {
                    b.Property<int>("InvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceID"));

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentID")
                        .HasColumnType("int");

                    b.HasKey("InvoiceID");

                    b.HasIndex("PaymentID");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Core_Layer.Entities.Reservation.ReservationEntity", b =>
                {
                    b.Property<int>("ReservationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationID"));

                    b.Property<int>("PassengerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReservationStatus")
                        .HasColumnType("int");

                    b.Property<short>("SeatNumber")
                        .HasColumnType("smallint");

                    b.Property<int>("TripID")
                        .HasColumnType("int");

                    b.HasKey("ReservationID");

                    b.HasIndex("PassengerID");

                    b.HasIndex("TripID");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Core_Layer.Entities.Reservation.TicketEntity", b =>
                {
                    b.Property<int>("TicketID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketID"));

                    b.Property<int>("InvoiceID")
                        .HasColumnType("int");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TicketCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TicketID");

                    b.HasIndex("InvoiceID");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Core_Layer.Entities.Trip.TripEntity", b =>
                {
                    b.Property<int>("TripID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TripID"));

                    b.Property<short>("AvailableSeatsCount")
                        .HasColumnType("smallint");

                    b.Property<string>("DriverInfo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EndLocationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EstimatedArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("ReservedSeatsBinary")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("ServiceProviderID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StartLocationID")
                        .HasColumnType("int");

                    b.Property<short>("TotalSeats")
                        .HasColumnType("smallint");

                    b.Property<TimeSpan>("TripDuration")
                        .HasColumnType("time");

                    b.Property<int>("TripStatus")
                        .HasColumnType("int");

                    b.Property<string>("VehicleInfo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("TripID");

                    b.HasIndex("EndLocationID");

                    b.HasIndex("ServiceProviderID");

                    b.HasIndex("StartLocationID");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("LocationEntityLocationEntity", b =>
                {
                    b.Property<int>("EndLocationLocationID")
                        .HasColumnType("int");

                    b.Property<int>("StartLocationLocationID")
                        .HasColumnType("int");

                    b.HasKey("EndLocationLocationID", "StartLocationLocationID");

                    b.HasIndex("StartLocationLocationID");

                    b.ToTable("LocationEntityLocationEntity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.CustomerEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.Actors.AuthoUser", "Account")
                        .WithMany("Customers")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core_Layer.Entities.Locations.AddressEntity", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core_Layer.Entities.ContactInformationEntity", "ContactInformation")
                        .WithMany()
                        .HasForeignKey("ContactInformationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core_Layer.Entities.Actors.PersonEntity", "Person")
                        .WithMany("Customers")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Address");

                    b.Navigation("ContactInformation");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.ManagerEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.Actors.AuthoUser", "Account")
                        .WithMany("Managers")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core_Layer.Entities.Actors.ManagerEntity", "CreatedBy")
                        .WithMany("Managers")
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.PassengerEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.Actors.PersonEntity", "Person")
                        .WithMany("Passengers")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.ServiceProvider.BusinessEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.Locations.AddressEntity", "Address")
                        .WithOne("Business")
                        .HasForeignKey("Core_Layer.Entities.Actors.ServiceProvider.BusinessEntity", "AddressID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core_Layer.Entities.ContactInformationEntity", "ContactInformation")
                        .WithMany()
                        .HasForeignKey("ContactInformationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("ContactInformation");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.ServiceProvider.Registeration_Request.SPRegRequestEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.Actors.ServiceProvider.BusinessEntity", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.ServiceProvider.Registeration_Request.SPRegResponseEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.Actors.ServiceProvider.Registeration_Request.SPRegRequestEntity", "Request")
                        .WithMany("Responses")
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core_Layer.Entities.Actors.ManagerEntity", "RespondedBy")
                        .WithMany()
                        .HasForeignKey("RespondedByID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Request");

                    b.Navigation("RespondedBy");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.ServiceProvider.ServiceProviderEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.Actors.AuthoUser", "Account")
                        .WithMany("ServiceProviders")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core_Layer.Entities.Actors.ServiceProvider.BusinessEntity", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Core_Layer.Entities.Locations.AddressEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.Locations.CityEntity", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core_Layer.Entities.Locations.StreetEntity", "Street")
                        .WithMany("Address")
                        .HasForeignKey("StreetID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Street");
                });

            modelBuilder.Entity("Core_Layer.Entities.Locations.CityEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.Locations.RegionEntity", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Core_Layer.Entities.Locations.LocationEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.Locations.AddressEntity", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Core_Layer.Entities.Locations.RegionEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.Locations.CountryEntity", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Core_Layer.Entities.Locations.StreetEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.Locations.CityEntity", "City")
                        .WithMany("Streets")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Core_Layer.Entities.Payment.PaymentEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.Payment.PaymentInfoEntity", "PaymentInfo")
                        .WithMany()
                        .HasForeignKey("PaymentInfoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core_Layer.Entities.Reservation.ReservationEntity", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PaymentInfo");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("Core_Layer.Entities.PaymentAccount.PayPalAccountEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.Locations.CountryEntity", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core_Layer.Entities.PaymentAccount.PaymentAccountEntity", "PaymentAccount")
                        .WithMany()
                        .HasForeignKey("PaymentAccountID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("PaymentAccount");
                });

            modelBuilder.Entity("Core_Layer.Entities.PaymentAccount.PaymentAccountEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.PaymentAccount.CurrencyEntity", "Currency")
                        .WithMany("PaymentAccounts")
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core_Layer.Entities.Actors.ServiceProvider.ServiceProviderEntity", "ServiceProvider")
                        .WithMany()
                        .HasForeignKey("ServiceProviderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("Core_Layer.Entities.Reservation.InvoiceEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.Payment.PaymentEntity", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Core_Layer.Entities.Reservation.ReservationEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.Actors.PassengerEntity", "Passenger")
                        .WithMany()
                        .HasForeignKey("PassengerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core_Layer.Entities.Trip.TripEntity", "Trip")
                        .WithMany()
                        .HasForeignKey("TripID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Passenger");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Core_Layer.Entities.Reservation.TicketEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.Reservation.InvoiceEntity", "Invoice")
                        .WithMany("Tickets")
                        .HasForeignKey("InvoiceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Core_Layer.Entities.Trip.TripEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.Locations.LocationEntity", "EndLocation")
                        .WithMany()
                        .HasForeignKey("EndLocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core_Layer.Entities.Actors.ServiceProvider.ServiceProviderEntity", "ServiceProvider")
                        .WithMany()
                        .HasForeignKey("ServiceProviderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core_Layer.Entities.Locations.LocationEntity", "StartLocation")
                        .WithMany()
                        .HasForeignKey("StartLocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EndLocation");

                    b.Navigation("ServiceProvider");

                    b.Navigation("StartLocation");
                });

            modelBuilder.Entity("LocationEntityLocationEntity", b =>
                {
                    b.HasOne("Core_Layer.Entities.Locations.LocationEntity", null)
                        .WithMany()
                        .HasForeignKey("EndLocationLocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core_Layer.Entities.Locations.LocationEntity", null)
                        .WithMany()
                        .HasForeignKey("StartLocationLocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Core_Layer.Entities.Actors.AuthoUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Core_Layer.Entities.Actors.AuthoUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core_Layer.Entities.Actors.AuthoUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Core_Layer.Entities.Actors.AuthoUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.AuthoUser", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Managers");

                    b.Navigation("ServiceProviders");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.ManagerEntity", b =>
                {
                    b.Navigation("Managers");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.PersonEntity", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Passengers");
                });

            modelBuilder.Entity("Core_Layer.Entities.Actors.ServiceProvider.Registeration_Request.SPRegRequestEntity", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("Core_Layer.Entities.Locations.AddressEntity", b =>
                {
                    b.Navigation("Business");
                });

            modelBuilder.Entity("Core_Layer.Entities.Locations.CityEntity", b =>
                {
                    b.Navigation("Streets");
                });

            modelBuilder.Entity("Core_Layer.Entities.Locations.CountryEntity", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("Core_Layer.Entities.Locations.RegionEntity", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Core_Layer.Entities.Locations.StreetEntity", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("Core_Layer.Entities.PaymentAccount.CurrencyEntity", b =>
                {
                    b.Navigation("PaymentAccounts");
                });

            modelBuilder.Entity("Core_Layer.Entities.Reservation.InvoiceEntity", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
